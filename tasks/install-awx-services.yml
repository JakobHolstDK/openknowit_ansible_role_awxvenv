- name: Install django-debug-toolbar 
  ansible.builtin.command: "pip install django-debug-toolbar"
  become: true

- name: Install django-rest-swagger
  ansible.builtin.command: "pip install django-rest-swagger"
  become: true

- name: Install ansible runner
  ansible.builtin.command: "pip install ansible_runner"
  become: true

- name: Git checkout nodejs
  ansible.builtin.git:
    repo: 'https://github.com/nodejs/node.git'
    dest: "/tmp/nodejs/{{ nodejsversion }}"
    version: '{{ nodejsversion }}'
  become: true
  become_user: "{{ awx_user }}"

- name: Configure nodejs
  ansible.builtin.command: ./configure
  args:
    chdir: "/tmp/nodejs/{{ nodejsversion }}"
  become: true
  become_user: "{{ awx_user }}"

- name: compile nodejs
  ansible.builtin.command: "make -j {{ ansible_processor_vcpus}}"
  args:
    chdir: "/tmp/nodejs/{{ nodejsversion }}"
  become: true
  become_user: "{{ awx_user }}"

- name: Copy node binary
  ansible.builtin.command: cp node /usr/bin/node
  args:
    chdir: "/tmp/nodejs/{{ nodejsversion }}"
  become: true

- name: Copy the build script
  template:
    src: build_awx_sdist.sh.j2
    dest: /usr/local/bin/build_awx_sdist.sh
    force: yes
    mode: '0700'
    owner: root
    group: root
  become: True


- name: Build AWX sdist
  ansible.builtin.command: /usr/local/bin/build_awx_sdist.sh
  args:
    chdir:  "/opt/awx/current"
  become: True
  
  

- name: Creates tower
  file:
    path: /etc/tower/conf.d
    state: directory
    owner: awx
    group: awx
    mode: 0770
    recurse: yes
  become: True

- name: Ensure awx is in the nginx group
  user:
    append: yes
    name: awx
    groups: nginx
  become: True

- name: Configure the Tower socket directory.
  file: path=/var/run/tower state=directory owner=nginx group=nginx mode=2775
  become: True

- name: Configure the Tower socket directory for tmpfiles.d
  template:
    src: tower.conf.j2
    dest: /etc/tmpfiles.d/tower.conf
    force: yes
    mode: '0640'
    owner: root
    group: root
  become: True

- name: generate the secret key 
  template:
    src: SECRET_KEY.j2
    dest: /etc/tower/SECRET_KEY
    force: yes
    mode: '0640'
    owner: awx
    group: awx
  become: True

- name: Configure the awx settings file
  template:
    src: settings.py.j2
    dest: /etc/tower/settings.py
    force: yes
    mode: '0640'
    owner: awx
    group: awx
  become: True


- name: Configure the Tower system user's home directory.
  file: path=/var/lib/awx state=directory owner=awx group=awx mode=0755
  become: True

- name: Configure the Tower system user's .ssh directory.
  file: path=/var/lib/awx/.ssh state=directory owner=awx group=awx mode=0700
  become: True

- name: Configure the Tower projects directory.
  file: path=/var/lib/awx/projects state=directory owner=awx group=awx mode=0750
  become: True

- name: Configure the Tower job output directory.
  file: path=/var/lib/awx/job_status state=directory owner=awx group=awx mode=0750
  become: True

- name: Configure the Tower job public directory.
  file: path=/var/lib/awx/public state=directory owner=awx group=awx mode=0750
  become: True

- name: Add Towers `conf.d` directory.
  file: path=/etc/tower/conf.d state=directory owner=root group=awx mode=0750
  become: True

- name: configure tower log directory
  file: path=/var/log/tower state=directory owner=awx group=awx mode=0750
  become: True

- name: Update awx_supervisord logrotate config file
  copy:
    src: logrotate_awx_supervisord
    dest: '/etc/logrotate.d/awx_supervisord'
    owner: root
    group: root
    mode: '0644'
  become: True

- name: Update hourly cron logrotate invocation
  copy:
    src: logrotate_cron.hourly
    dest: '/etc/cron.hourly/logrotate'
    owner: root
    group: root
    mode: '0744'
  become: True

# When running with an external database, we need to remove 'postgresql' from
# the list of tower managed services.
- name: Update dependent service configuration
  file:
    path: "/etc/systemd/system/{{ item }}.service.d"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - "nginx"
    - "supervisord"
    - "{{ awx_install_redis_init_name }}"
    - "{{ awx_install_pg_init_name | default(omit) }}"
  become: True

- name: Update dependent service configuration
  copy:
    src: "{{ lookup('first_found', override) }}"
    dest: "/etc/systemd/system/{{ item }}.service.d/override.conf"
    mode: 0644
    owner: root
    group: root
  vars:
    override:
      - "files/override-{{ item }}.conf"
      - "files/override.conf"
  loop:
    - "nginx"
    - "supervisord"
    - "{{ awx_install_redis_init_name }}"
    - "{{ awx_install_pg_init_name | default(omit) }}"
  become: True

- name: Reload systemd configuration
  command: systemctl daemon-reload
  become: True

- name: Check if this is a fresh installation
  stat:
    path: /var/lib/awx/.tower_version
  register: previous_install_status
  become: True

- name: Configure the Rsyslog socket directory.
  file: path=/var/run/awx-rsyslog state=directory owner=awx group=awx mode=0750
  become: True

- name: Create tmpfiles.d entry for rsyslog socket directory
  template:
    src: rsyslog_tmpd.conf
    dest: /etc/tmpfiles.d/rsyslog.conf
    force: yes
    mode: '0640'
    owner: root
    group: root
  become: True

- name: create export script
  template:
    src: collect_static_files.sh.j2
    dest: /usr/local/bin/collect_static_files.sh
    force: yes
    mode: '0750'
    owner: awx
    group: awx
  become: True

- name: create awx_preparescript
  template:
    src: awxprepare.sh.j2
    dest: /usr/local/bin/awxprepare.sh
    force: yes
    mode: '0770'
    owner: awx
    group: awx
  become: True


#- name: Change file permission on var lib awx
#  file:
#    path: /var/lib/awx
#    owner: "awx"
#    group: "awx"
#    recurse: yes
#  become: True

- name: configure tower run socket dir
  file: path=/var/run/redis  state=directory owner=awx group=awx mode=0770
  become: True

- name: configure tower run socket dir
  file: path=/var/run/tower  state=directory owner=awx group=awx mode=0770
  become: True

#- name: Collect static files for Tower.
#  shell: /usr/local/bin/collect_static_files.sh
#  become_user: awx
#  become: True

#- name: Run awxprepare
#  shell: /usr/local/bin/awxprepare.sh
#  become_user: awx
#  become: True
#  register: awxprepare_cmd
#  failed_when: awxprepare_cmd.rc == 1
#  changed_when: awxprepare_cmd.rc == 0
- name: Force superuser on awx
  command: "awx-manage  createsuperuser  --username {{ awx_admin_user }} --email {{ awx_admin_email }} --noinput"
  register: createsuperuser_cmd
  failed_when: createsuperuser_cmd.rc == 1
  changed_when: createsuperuser_cmd.rc == 0
  become_user: "{{ awx_user }}"
  become: True


- name: Migrate if needed
  environment: 
    GIT_PYTHON_REFRESH: quiet
  command: "awx-manage migrate"
  args:
    chdir: "{{ destination }}"
  register: migrate_cmd
  failed_when: migrate_cmd.rc == 1
  changed_when: migrate_cmd.rc == 0
  become_user: "{{ awx_user }}"
  become: True

- name: "collect statics"
  environment: 
    GIT_PYTHON_REFRESH: quiet
  command: "awx-manage collectstatic --noinput --clear -v0"
  args:
    chdir: "{{ destination }}"
  register: migrate_cmd
  failed_when: migrate_cmd.rc == 1
  changed_when: migrate_cmd.rc == 0
  become_user: "{{ awx_user }}"
  become: True

- name: "Force password on superuser"
  environment: 
    GIT_PYTHON_REFRESH: quiet
    PGPASSWORD: "{{ awx_db_password }}"
  command:
    argv: 
     - psql
     - '-d {{ awx_db_name }}'
     - '-U {{ awx_db_user }}'
     - '-h {{ postgreshost }}'
     - '-W {{ awx_admin_password }}'
     - '-c UPDATE auth_user SET password="{{ awx_admin_password }}" where username = "{{ awx_admin_user }};"'
  args:
    chdir: "{{ destination }}"
  register: migrate_cmd
  failed_when: migrate_cmd.rc == 1
  changed_when: migrate_cmd.rc == 0
  become_user: "{{ awx_user }}"
  become: True

- name: "Provision instance"
  environment: 
    GIT_PYTHON_REFRESH: quiet
  command: "awx-manage  provision_instance --hostname={{ ansible_hostname }}"
  args:
    chdir: "{{ destination }}"
  register: migrate_cmd
  failed_when: migrate_cmd.rc == 1
  changed_when: migrate_cmd.rc == 0
  become_user: "{{ awx_user }}"
  become: True

- name: "Register quename"
  environment: 
    GIT_PYTHON_REFRESH: quiet
  command: "awx-manage  register_queue --queuename=tower --hostname={{ ansible_hostname }}"
  args:
    chdir: "{{ destination }}"
  register: migrate_cmd
  failed_when: migrate_cmd.rc == 1
  changed_when: migrate_cmd.rc == 0
  become_user: "{{ awx_user }}"
  become: True





- name: Create systemd service cbreceiver
  template:
    src:  awx-cbreceiver.service.j2
    dest: /usr/lib/systemd/system/awx-cbreceiver.service
    force: yes
    mode: '0644'
    owner: root
    group: root
  become: True

- name: Create systemd service  awx-daphne.service
  template:
    src:  awx-daphne.service.j2
    dest: /usr/lib/systemd/system/awx-daphne.service
    force: yes
    mode: '0644'
    owner: root
    group: root
  become: True

- name: Create systemd service  awx-web
  template:
    src:  awx-web.service.j2
    dest: /usr/lib/systemd/system/awx-web.service
    force: yes
    mode: '0644'
    owner: root
    group: root
  become: True

- name: Create systemd service  dispatcher
  template:
    src:  awx-dispatcher.service.j2
    dest: /usr/lib/systemd/system/awx-dispatcher.service
    force: yes
    mode: '0644'
    owner: root
    group: root
  become: True

- name: Create systemd service cbreceiver
  template:
    src:  awx-cbreceiver.service.j2
    dest: /usr/lib/systemd/system/awx-cbreceiver.service
    force: yes
    mode: '0644'
    owner: root
    group: root
  become: True

- name: Create systemd service awx-wsbroadcast.service 
  template:
    src:  awx-wsbroadcast.service.j2
    dest: /usr/lib/systemd/system/awx-wsbroadcast.service
    force: yes
    mode: '0644'
    owner: root
    group: root
  become: True

- name: Create systemd service  awx
  template:
    src:  awx.service.j2
    dest: /usr/lib/systemd/system/awx.service
    force: yes
    mode: '0644'
    owner: root
    group: root
  become: True

- name: Reload systemd configuration
  command: systemctl daemon-reload
  become: True

- name: Enable services  and set state started
  ansible.builtin.service:
    name: "{{ item }}"
    enabled: yes
    state: started
  become: True
  with_items:
    - awx-cbreceiver
    - awx-daphne
    - awx-dispatcher
    - awx-web
    - awx-wsbroadcast

- name: Run pip freeze
  shell: "pip freeze >/tmp/awxrpm.requirements.txt"
  become_user: awx
  become: True

- name: Collect the requirements.txt from the automated install
  ansible.builtin.fetch:
    src: /tmp/awxrpm.requirements.txt
    dest: /tmp/awxrpm.requirements.txt
    flat: yes
  become: True